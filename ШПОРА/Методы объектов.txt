----------------------------------------- Перебор --------------------------------
for (key in obj) {}
    Порядок перебора соответствует порядку объявления для нечисловых ключей, а числовые – сортируются
    не делает различия между свойствами объекта и его прототипа

Object.keys(obj) возвращает массив собственныx свойств объекта.
Object.getOwnPropertyNames(o) - возвращает массив содержащий все ключи (перечисляемых и неперечисляемых)

----------------------------------------- Работа со св-вами ---------------------------------
delete obj.key - удалить св-во
if ("name" in obj) - проверка на наличие св-ва в объекте
obj.hasOwnProperty(key) возвращает true, если свойство key принадлежит самому объекту obj, иначе false.

----------------------------------------- Создание ---------------------------------
Object.create(null) - создаем объект коллекцию без лишниъ св-в прототипов итп
var animal1 = Object.create(Animal); - создание объекта с указанием прототипа для него.

------------------------------------------- Чит ф-ции -------------------------------
function isEmpty(obj) { - // проверка на пустоту объекта
    for (var key in obj) {
        return false;
    }
    return true;
}

---------------------------------------- Работа с КОНТЕКСТОМ this ---------------------------------
func.call(obj, a, b...) - вызывает ф-цию func в контексте = obj, c аргументами a и b.
func.apply(obj, arr) - вызывает ф-цию func в контексте = obj, c массивом агрументов.
var g = f.bind("Context", carringArg); bind используют для привязки функции к контексту, чтобы затем присвоить её в обычную переменную и вызывать уже без явного указания объекта.
    вторым и следующими аргументами можно каррировать (привязать) аргументы. Т.е. При вызове g будут передаватьcя свои аргументы после тех, которые указаны в bind.
    g частичная ф-ция от f

------------------------------------ Другие Методы объекта Object ---------------------------------
Object.getPrototypeOf(obj) - гетер прототипа
Object.setPrototypeOf(obj, newProto) - сетер прототипа
Object.assign(target, src1, src2...) - получает список объектов и копирует в первый target свойства из остальных.
	если св-ва объектов совпадут то в target будет добавленно св-во из src2
Object.is(value1, value2) - Новая функция для проверки равенства значений.
     Object.is(+0, -0) // false
     Object.is(NaN, NaN)  // true


---------------------------------------- Map -------------------------------------
Map - коллекция для хранения записей вида ключ:значение
    ключом может быть произвольное значение
    map.size хранит общее количество записей в map
    map.delete(key) - удаляет запись с ключом key, возвращает true, если такая запись была, иначе false.
    map.clear() – удаляет все записи, очищает map.
    map.has(key) – возвращает true, если ключ есть, иначе false.
Создание
    let map = new Map();
Запись
    1. map.set('1', 'str1');  можно чейнить map.set('1', 'str1').set(1, 'num1').set(true, 'bool1');
    2. let map = new Map([
      ['1',  'str1'],
      [1,    'num1'],
      [true, 'bool1']
    ]);
Чтение
    map.get(1);
Перебор
    1. forEach
    2. For of
        map.keys() – возвращает итерируемый объект для ключей,
            for(let fruit of map.keys()) {}
        map.values() – возвращает итерируемый объект для значений,
            for(let amount of map.values()) {}
        map.entries() – возвращает итерируемый объект для записей [ключ, значение], он используется по умолчанию в for..of.
            for(let entry of map) {} // то же что и recipeMap.entries()

---------------------------------------- Set ----------------------------------------
Set – коллекция для хранения уникальных значение
    set.add(item) – добавляет в коллекцию item, возвращает set (чейнится).
    set.delete(item) – удаляет item из коллекции, возвращает true, если он там был, иначе false.
    set.has(item) – возвращает true, если item есть в коллекции, иначе false.
    set.clear() – очищает set.
Перебор
    1. forEach
        set.forEach((value, valueAgain, set) => {}
    2. For of






