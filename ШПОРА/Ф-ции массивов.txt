fruits[0] - Обращение к св-вам
arr.length - возвращает длину массива

------------------------------------------- Манипуляции --------------------------------------------
arr.pop() - удаляет последний элемент и возвращает его
arr.push("Груша"); - добавляет элемент в конец
arr.shift() - удаляет первый элемент и возвращает его.
arr.unshift('Яблоко') - добавляет элемент в начало массива
arr.splice(index[, deleteCount, insertEl1, ..., insertEl1]). вернет массив из удаленных элементов
    index - начать c позиции. Может быть отрицательным, тогда поиск идет с конца
    deleteCount - сколько элементов удалить. Может быть 0. Тогда ничего не удалится.
    insertEl1 - элементы для вставки. Необязательный аргумент.
arr.join(';')- массив в строку ';' - разделитель
str.split(', ') – строка в массив (', ') - разделитель
arr.slice(begin, end) копирует участок массива от begin до end, не включая end
    Если не указать end – копирование будет до конца массива.
    Можно использовать отрицательные индексы, они отсчитываются с конца.
    Если вообще не указать аргументов – скопируется весь массив.
arr.sort() – для сортировки массива. Если не передать функцию сравнения – сортирует элементы как строки.
arr.reverse() – меняет порядок элементов на обратный.
arr.concat(value1 или arr2) – объединяет массивы. Если аргумент concat – массив, то concat добавляет элементы из него.
arr.indexOf(searchElement[, fromIndex]) - Поиск элемента в массиве начинается с номера fromIndex, если он указан. Если нет – с начала массива.
    возвращает номер элемента searchElement в массиве или -1, если его нет.
arr.lastIndexOf(searchElement[, fromIndex]) ищет справа-налево: с конца массива или с номера fromIndex, если он указан.
Object.keys(obj) -  возвращает массив ключей объекта.

------------------------------------------------------ Перебор forEach --------------------------------------------
arr.forEach(callback[, thisArg])
    callback(item, i, arr):
        item – очередной элемент массива.
        i – его номер.
        arr – массив, который перебирается.
    thisArg - позволяет указать контекст this для callback. Необязательный аргумент.
--------------------------------------------------------- filter ----------------------------------------------
arr.filter(callback[, thisArg]) - фильтрация массива через ф-цию. Он возвращает новый массив, в который войдут только те элементы arr, для которых вызов callback(item, i, arr) возвратит true.
    var positiveArr = arr.filter(function(item) {
      return item > 0;
    });
------------------------------------------------------------- map -------------------------------------------------
arr.map(callback[, thisArg]) - возвращает новый транфсформированный массив, который будет состоять из результатов вызова callback(item, i, arr) для каждого элемента arr.
    var nameLengths = names.map(function(item) {
      return item.length;
    });
--------------------------------------------every/some проверка массива. -------------------------------------------
Метод arr.every(callback[, thisArg]) возвращает true, если вызов callback вернёт true для каждого элемента arr.
Метод arr.some(callback[, thisArg]) возвращает true, если вызов callback вернёт true для какого-нибудь элемента arr.
    var arr = [1, -1, 2, -2, 3];
    function isPositive(number) {
      return number > 0;
    }
    alert( arr.every(isPositive) ); // false, не все положительные
    alert( arr.some(isPositive) ); // true, есть хоть одно положительное

----------------------------------------------------- reduce/reduceRight ------------------------------------------
arr.reduce(callback[, initialValue]) используется для последовательной обработки каждого элемента массива с сохранением промежуточного результата.
    callback(previousValue, currentItem, index, arr)
        previousValue – последний результат вызова функции, он же «промежуточный результат».
        currentItem – текущий элемент массива, элементы перебираются по очереди слева-направо.
        index – номер текущего элемента.
        arr – обрабатываемый массив.
    initialValue. Если есть, то на первом вызове значение previousValue будет равно initialValue, а если у reduce нет второго аргумента, то оно равно первому элементу массива, а перебор начинается со второго.

Пример: сумма элементов массива:
    var result = arr.reduce(function(sum, current) { // для каждого элемента массива запустить функцию, промежуточный результат передавать первым аргументом далее
      return sum + current;
    }, 0);

Метод reduceRight работает аналогично, но идёт по массиву справа-налево.