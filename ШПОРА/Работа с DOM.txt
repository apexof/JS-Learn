<HTML> = document.documentElement
<BODY> = document.body
------------------------------------------ Разное ----------------------------------------------------------------------
p instanceof Element/Comment/Element - Узнать класс узла
parent.contains(child) - Возвращает true, если parent содержит child или parent == child.
nodeA.compareDocumentPosition(nodeB) - он предоставляет одновременно информацию и о содержании и об относительном порядке элементов. Возвращаемое значение – битовая маска в 10ой системе.
-------------------------------------------------- Добавление / удаление --------------------------------------------
document.write - Строка просто пишется в HTML-документ без проверки структуры тегов. Запуск после загрузки приведёт к очистке документа.
Методы для создания узлов:
    document.createElement(tag) – создает элемент
    document.createTextNode(value) – создает текстовый узел
    elem.cloneNode(deep) – клонирует элемент, если deep == true, то со всеми потомками, если false – без потомков.
Вставка и удаление узлов: Все эти методы возвращают elem.
    parent.appendChild(elem)
    parent.insertBefore(elem, nextSibling) если nextSibling === null, функция работает как appendChild
    parent.removeChild(elem)
    parent.replaceChild(newElem, elem)
Мультивставка
1. elem.insertAdjacentHTML(where, html), elem.insertAdjacentElement(where, node), elem.insertAdjacentText(where, text)
    where: Куда по отношению к elem вставлять строку.
    1. beforeBegin - перед elem.
    2. afterBegin - внутрь elem, в самое начало.
    3. beforeEnd - внутрь elem, в конец.
    4. afterEnd - после elem.
2. document.createDocumentFragment() - создаем новый fragment. Напихиваем в него элементы с помощью appendChild, а потом вставляем fragment в нудное место на странице.
3. Новые методы
    node.append(...nodes) – вставляет nodes в конец node,
    node.prepend(...nodes) – вставляет nodes в начало node,
    node.after(...nodes) – вставляет nodes после узла node,
    node.before(...nodes) – вставляет nodes перед узлом node,
    node.replaceWith(...nodes) – вставляет nodes вместо node.

-------------------------------------- Общие для всех св-ва --------------------------------------
el.nodeType - вернет тип узла. Элемент = 1, текст = 3, коммент = 8
el.tagName - вернет имя тега КАПСОМ. только для элементов иначе undefined.
el.nodeName - вернет имя тега если это элемент или строку с типом узла. #comment/#document/#text
el.innerHTML - получить/изменить HTML-содержимое ЭЛЕМЕНТА. += не дописывает а перезаписывает.
el.innerText - не стоит использовать
el.outerHTML  - содержит HTML элемента целиком с тегами. При записи в elem.outerHTML переменная elem сохраняет старый узел.
txt.data - чтение и запись для текстовых узлов или комментариев.
el.textContent - чтение: возвращает в точности весь текст (из вложенных элементов тоже), включая переводы строк и пробелы, но без тегов.
    запись: в элемент. Теги будут сохранены и показаны как текст.

------------------------------------------- Навигация по текстовым узлам ----------------------------------
el.childNodes - Псевдо-массив childNodes хранит все дочерние элементы, включая текстовые. Не имеет обычных методов массива, перебирать лучше через for
    elem.hasChildNodes(); - проверка
el.lastChild, el.firstChild - первый, последний ребенок
el.previousSibling - сосед слева
el.nextSibling - сосед справа
el.parentNode - родитель ЭЛЕМЕНТ. тонкость: document.documentElement.parentNode - document

-------------------------------------------- Навигация по элементам --------------------------------------------
children – дочерние элементы.
firstElementChild, lastElementChild – первый и последний дети-элементы.
previousElementSibling, nextElementSibling – соседи-элементы.
parentElement – родитель-элемент. тонкость: document.documentElement.parentElement - null

------------------------------------------ Таблицы --------------------------------------------------------
TABLE
    table.rows – коллекция строк TR таблицы.
    table.caption/tHead/tFoot – ссылки на элементы таблицы CAPTION, THEAD, TFOOT.
    table.tBodies – коллекция элементов таблицы TBODY, по спецификации их может быть несколько.
THEAD/TFOOT/TBODY
    tbody.rows – коллекция строк TR секции.
TR
    tr.cells – коллекция ячеек TD/TH
    tr.sectionRowIndex – номер строки в текущей секции THEAD/TBODY
    tr.rowIndex – номер строки в таблице
TD/TH
    td.cellIndex – номер ячейки в строке

------------------------------------------ ФОРМЫ --------------------------------------------------------
document.forms[name/index] - получить элемент form по имени или номеру.
form.elements[name/index] - получить элементы конкретной формы по имени или номеру. Например document.forms.[0].elements[0]
    если несколько элементов с одинаковым именем вернет коллекцию
    Свойство elements также есть у элементов <fieldset>
element.form - хранит форму предка. Например document.forms.[0].elements[0].form

select.options - если через form получили select, то его внутренние оptions доступны так.
    option.selected - выбрана ли опция. true/false
    option.index - номер опции в списке селекта
    option.text - Текстовое содержимое опции (то, что видит посетитель).
--------------------------------------------- Поиск -------------------------------------------
document.getElementById("id")
elem.getElementsByTagName('p') - Возвращается коллекция, с таким тегом. elem.getElementsByTagName('*'); -  получить всех потомков элемента elem
document.getElementsByName('name') - позволяет получить все элементы с данным атрибутом name
elem.getElementsByClassName(className) - возвращает коллекцию элементов с классом className
elem.querySelectorAll(css) - возвращает все элементы потомки elem, удовлетворяющие CSS-селектору css.
elem.querySelector(css) - возвращает не все, а только первый элемент, соответствующий CSS-селектору css.
elem.matches(css) - проверяет, удовлетворяет ли elem селектору css. Он возвращает true либо false.
elem.closest(css) - возвращает ближайший родительский элемент (или сам элемент если подходит), который соответствует заданному CSS-селектору или null, если таковых элементов вообще нет.

--------------------------------- Св-ва и атрибуты ----------------------------------------
1. нужно использовать всегда только свойства, кроме тех ситуаций, когда нужны именно атрибуты.
2. Обращение к св-вам, чтение/запись: el.href = 'google.com'
3. методы для раб. с атрибутами
    elem.hasAttribute(name) – проверяет наличие атрибута
    elem.getAttribute(name) – получает значение атрибута
    elem.setAttribute(name, value) – устанавливает атрибут
    elem.removeAttribute(name) – удаляет атрибут
    elem.attributes - содержит псевдо-массив объектов со свойствами name и value.

----- ИСКЛЮЧЕНИЯ: значение св-ва отличается от значения атрибута -----------------
1. href атрибут тега может быть любым, а свойство href, в соответствии со спецификацией W3C, будет быть полной ссылкой
2. input checked, selected etc. свойство: true/false, а атрибут – любое строковое, важно лишь его наличие.
3. если атрибут выдуманный св-во не создается

---- ИСКЛЮЧЕНИЯ: название св-ва отличается от названия атрибута -----------------
1. атрибут class - >
    св-во className - вернет строкой все классы через пробел
    св-во classList – это псевдомассив/объект для работы с классами.
        elem.classList.contains("class") – возвращает true/false, в зависимости от того, есть ли у элемента класс class.
        elem.classList.add/remove("class") – добавляет/удаляет класс class
        elem.classList.toggle("class") – если класса class нет, добавляет его, если есть – удаляет.
2. <label for="...">) соответствует свойство с названием htmlFor.
3. атрибут data-user-location - > св-во dataset.userLocation

----------------------------------- Запись стилей (лучше использовать классы) -----------------------
elem.style.color = 'red';
    нужно указывать единицы измерения, например px
    Префикс в имени дает заглавную букву background-color  => elem.style.backgroundColor. Исключения: не elem.style.float, а elem.style.cssFloat.
    elem.style.width="" - сбросить поставленный стиль. Будет взято значение из CSS.
    Стиль в style находится в формате браузера, а не в том, в котором его присвоили.
    Свойство style мы используем лишь там, где не работают классы. например если точное значение цвета/отступа/высоты вычисляется в JavaScript.
    чтобы поставить сразу много стилей элементу можно использовать:
        el.setAttribute("style", ...)
        el.style.cssText = "str" - все предыдущие свойства style удаляются.
------------------------------------------------ Чтение стилей -----------------------------------------------
1. elem.style.color - лучше не использовать.
    Свойство style содержит лишь тот стиль, который указан в атрибуте элемента, без учёта каскада CSS.
2. getComputedStyle(elem).color - получить использвемый стиль. размеры приводятся к пикселям. требует полное имя свойство!  padding-left
















