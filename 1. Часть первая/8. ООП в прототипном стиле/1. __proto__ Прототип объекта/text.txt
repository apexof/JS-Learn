var animal = {
  eats: true
};
var rabbit = {
  jumps: true,
  __proto__ = animal;
};
Объект, на который указывает ссылка __proto__, называется «прототипом».
В данном случае получилось, что animal является прототипом для rabbit.
Также говорят, что объект rabbit «прототипно наследует» от animal.

Другими словами, прототип – это «резервное хранилище свойств и методов» объекта, автоматически используемое при поиске.

----------------------------------------hasOwnProperty---------------------------------
Обычный цикл for..in не делает различия между свойствами объекта и его прототипа и перебирает все.
Вызов obj.hasOwnProperty(prop) возвращает true, если свойство prop принадлежит самому объекту obj, иначе false.

---------------------------------------Object.create(null)---------------------------------
Объект, создаваемый при помощи Object.create(null) не имеет прототипа, а значит в нём нет лишних свойств. Для коллекции – как раз то, что надо.

---------------------------------------Методы для работы с proto-----------------------------
Чтение: Object.getPrototypeOf(obj) - Возвращает obj.__proto__ (кроме IE8-)
Запись: Object.setPrototypeOf(obj, proto) - Устанавливает obj.__proto__ = proto (кроме IE10-).
Создание объекта с прототипом: Object.create(proto, descriptors)
Создаёт пустой объект с __proto__, равным первому аргументу (кроме IE8-), второй необязательный аргумент может содержать дескрипторы свойств.