Все переменные внутри функции – это свойства специального внутреннего объекта LexicalEnvironment, который создаётся при её запуске.

В отличие от window, объект LexicalEnvironment является внутренним, он скрыт от прямого доступа.

Из функции мы можем обратиться не только к локальной переменной, но и к внешней:
Интерпретатор, при доступе к переменной, сначала пытается найти переменную в текущем LexicalEnvironment, а затем, если её нет – ищет во внешнем объекте переменных.
На верхнем уровне им является «глобальный объект», в браузере это window.

Каждая функция при создании получает ссылку [[Scope]] на объект с переменными (LexicalEnvironment), в контексте которого была создана.
При запуске функции создаётся свой новый объект с переменными LexicalEnvironment. Он получает ссылку на внешний объект переменных из [[Scope]].
При поиске переменных он осуществляется сначала в текущем объекте переменных, а потом – по этой ссылке.

Если переменная не найдена во внешнем объекте переменных, то она ищется в ещё более внешнем (через [[Scope]] внешней функции)

Переменную во внешней области видимости можно не только читать, но и изменять.

При каждом запуске ф-ции создаётся свой объект переменных LexicalEnvironment, со своим свойствами

------------------------------------------Ф-ции как Объекты----------------------------
Функция в JavaScript является объектом, поэтому можно присваивать свойства прямо к ней, вот так:
function f() {}
f.test = 5;

Свойства функции не стоит путать с переменными и параметрами. Они совершенно никак не связаны.
Переменные доступны только внутри функции, они создаются в процессе её выполнения.
Это – использование функции «как функции».
А свойство у функции – доступно отовсюду и всегда. Это – использование функции «как объекта».

-------------------------------------------Статические переменные------------------------------
Иногда свойства, привязанные к функции, называют «статическими переменными».
В некоторых языках программирования можно объявлять переменную, которая сохраняет значение между вызовами функции.
В JavaScript ближайший аналог – такое вот свойство функции.
-------------------------------------------Замыкания------------------------------
Замыкание – это функция вместе со всеми внешними переменными, которые ей доступны.
Обычно, говоря «замыкание функции», подразумевают не саму эту функцию, а именно внешние переменные.
Иногда говорят «переменная берётся из замыкания». Это означает – из внешнего объекта переменных.
---------------------------------------------Скобки--------------------------------------------------
var shooter = (function (x) {
    return function() {// code }
})(i);
То же самое без скобок:
var shooter = function (x) {
    return function() {// code }
}(i);