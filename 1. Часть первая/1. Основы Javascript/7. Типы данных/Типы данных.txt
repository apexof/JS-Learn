Специальные числовые значения:
Infinity (бесконечность) и NaN (Not-A-Number) (Он возникает, когда математические функции не могут вернуть значение, ошибка вычислений).
Операторы равенства (== и ===) не могут использоваться для проверки значения на равенство NaN.
Вместо них используйте функции Number.isNaN() или isNaN().
NaN === NaN;        // false
Number.NaN === NaN; // false
isNaN(NaN);         // true
isNaN(Number.NaN);  // true

Типы данных:
Примитивные
    1. Число
    2. Строка
    3. Булевый
    4. null
    В JavaScript null не является «ссылкой на несуществующий объект» или «нулевым указателем», как в некоторых других языках.
    Это просто специальное значение, которое имеет смысл «ничего» или «значение неизвестно».
    5. undefined
    Оно имеет смысл «значение не присвоено».
    Поскольку undefined не является зарезервированным словом, он может использоваться в качестве идентификатора (имени переменной) в любой области видимости, за исключением глобальной.
    Функция возвращает undefined, если она не возвращает какого-либо значения.
Особый тип:
6. Объект

--------------------------------------------

typeof undefined // "undefined"
typeof 0 // "number"
typeof true // "boolean"
typeof "foo" // "string"
typeof {} // "object"
typeof null // "object"  (1)
typeof function(){} // "function"  (2)

1. Результат typeof null == "object" – это официально признанная ошибка в языке, которая сохраняется для совместимости.
На самом деле null – это не объект, а отдельный тип данных.
2. Функции мы пройдём чуть позже.
Пока лишь заметим, что функции не являются отдельным базовым типом в JavaScript, а подвидом объектов.
Но typeof выделяет функции отдельно, возвращая для них "function".
На практике это весьма удобно, так как позволяет легко определить функцию.