----------------------------------------------Параметры по умолчанию-----------------------------------------------
1. Значение по умолчанипю используется когда ничего не передено или передано undefined;
2. Параметры по умолчанию могут быть не только значениями, но и выражениями.
Заметим, что значение выражения getCurrentUser().toUpperCase() будет вычислено, и соответствующие функции вызваны – лишь в том случае, если это необходимо, то есть когда функция вызвана без параметра.


----------------------------------------------Оператор rest вместо arguments-------------------------------------
function showName(firstName, lastName, ...rest) { // }
1. В rest попадут все оставшиеся агрументы
2. Заметим, что rest – настоящий массив, с методами map, forEach и другими, в отличие от arguments.
3. Оператор … должен быть в конце

------------------------------------ Оператор spread Передача массива параметров в виде списка -------------------------------------
func(...numbers);
func.apply(window, numbers);

---------------------------------------------- Деструктуризация в параметрах ф-ции -------------------------------------
Если функция получает объект, то она может его тут же разбить в переменные:
function showMenu({title, width, height} = {) {
  alert(title + ' ' + width + ' ' + height); // Меню 100 200
}
Заметим, что в примере выше какой-то аргумент у showMenu() обязательно должен быть, чтобы разбить его на переменные. = {}

---------------------------------------------Имя «name»--------------------------------------------
function f() {} // f.name == "f"

--------------------------------------------- Функции в блоке -------------------------------------
Объявление функции Function Declaration, сделанное в блоке, видно только в этом блоке.
'use strict';
if (true) {
  sayHi(); // работает
  function sayHi() {alert("Привет!");}
}
sayHi(); // ошибка, функции не существует

--------------------------------------------Функции через =>------------------------------------
let inc = (x, y) => x+1; или без аргументов let inc = () => x+1; Если один параметр то скобки не нужны.
то же самое что
let inc = function(x) { return x + 1; };
аргументы => выражение, которое нужно вернуть.
Когда тело функции достаточно большое, то можно его обернуть в фигурные скобки {…}, но return придется писать руками
2. Функции-стрелки не имеют своего this. Внутри функций-стрелок – тот же this, что и снаружи.
3. Функции-стрелки нельзя использовать в качестве конструктора
4. Функции-стрелки не имеют своего arguments