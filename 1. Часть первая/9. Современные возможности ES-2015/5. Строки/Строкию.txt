-------------------------------------------Кавычки ` `-----------------------------------------------------
1. В них разрешён перевод строки
2. Можно вставлять выражения при помощи ${…}.
alert(`${let} + ${let2} = ${apples + oranges}`);

-------------------------------------------- Функции шаблонизации -------------------------------------------
Можно использовать свою функцию шаблонизации для строк.
Название этой функции ставится перед первой обратной кавычкой:
let str = func`моя строка`;

Эта функция будет автоматически вызвана и получит в качестве аргументов строку, разбитую по вхождениям параметров ${…} и сами эти параметры.
Надо использовать новые корректные ф-ции
String.fromCodePoint - по коду возвращает символ юникода
str.codePointAt - возвращает код переданного символа юникода
аналоги String.fromCharCode и str.charCodeAt
alert( "\u2033" ); - вставляет симовл по юникод коду (четырехзначному)
alert( "\u{20332341}" ); - то же самое до 8 знаков

-------------------------------------------- str.normalize() -------------------------------------------
alert("S\u0307\u0323"); - смешанный символ
str.normalize() - для сравнения таких символов

-------------------------------------------- полезные методы -------------------------------------------
str.includes(s) – проверяет, включает ли одна строка в себя другую, возвращает true/false.
str.endsWith(s) – возвращает true, если строка str заканчивается подстрокой s.
str.startsWith(s) – возвращает true, если строка str начинается со строки s.
str.repeat(times) – повторяет строку str times раз.
